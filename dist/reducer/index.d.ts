import { IProps } from 'blg-post';
import { IloadListPost } from '../action';
export declare function reducer(state: IProps[] | undefined, action: IloadListPost): IProps[] | {
    listPost: IProps[];
    length: number;
    toString(): string;
    toLocaleString(): string;
    push(...items: IProps[]): number;
    pop(): IProps | undefined;
    concat(...items: ConcatArray<IProps>[]): IProps[];
    concat(...items: (IProps | ConcatArray<IProps>)[]): IProps[];
    join(separator?: string | undefined): string;
    reverse(): IProps[];
    shift(): IProps | undefined;
    slice(start?: number | undefined, end?: number | undefined): IProps[];
    sort(compareFn?: ((a: IProps, b: IProps) => number) | undefined): IProps[];
    splice(start: number, deleteCount?: number | undefined): IProps[];
    splice(start: number, deleteCount: number, ...items: IProps[]): IProps[];
    unshift(...items: IProps[]): number;
    indexOf(searchElement: IProps, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: IProps, fromIndex?: number | undefined): number;
    every(callbackfn: (value: IProps, index: number, array: IProps[]) => boolean, thisArg?: any): boolean;
    some(callbackfn: (value: IProps, index: number, array: IProps[]) => boolean, thisArg?: any): boolean;
    forEach(callbackfn: (value: IProps, index: number, array: IProps[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: IProps, index: number, array: IProps[]) => U, thisArg?: any): U[];
    filter<S extends IProps>(callbackfn: (value: IProps, index: number, array: IProps[]) => value is S, thisArg?: any): S[];
    filter(callbackfn: (value: IProps, index: number, array: IProps[]) => any, thisArg?: any): IProps[];
    reduce(callbackfn: (previousValue: IProps, currentValue: IProps, currentIndex: number, array: IProps[]) => IProps): IProps;
    reduce(callbackfn: (previousValue: IProps, currentValue: IProps, currentIndex: number, array: IProps[]) => IProps, initialValue: IProps): IProps;
    reduce<U>(callbackfn: (previousValue: U, currentValue: IProps, currentIndex: number, array: IProps[]) => U, initialValue: U): U;
    reduceRight(callbackfn: (previousValue: IProps, currentValue: IProps, currentIndex: number, array: IProps[]) => IProps): IProps;
    reduceRight(callbackfn: (previousValue: IProps, currentValue: IProps, currentIndex: number, array: IProps[]) => IProps, initialValue: IProps): IProps;
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: IProps, currentIndex: number, array: IProps[]) => U, initialValue: U): U;
    find<S extends IProps>(predicate: (this: void, value: IProps, index: number, obj: IProps[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: (value: IProps, index: number, obj: IProps[]) => boolean, thisArg?: any): IProps | undefined;
    findIndex(predicate: (value: IProps, index: number, obj: IProps[]) => boolean, thisArg?: any): number;
    fill(value: IProps, start?: number | undefined, end?: number | undefined): IProps[];
    copyWithin(target: number, start: number, end?: number | undefined): IProps[];
    [Symbol.iterator](): IterableIterator<IProps>;
    entries(): IterableIterator<[number, IProps]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<IProps>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
};
